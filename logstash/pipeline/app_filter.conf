filter {
#json from log4net
        if [fields][log_type] == "json" {

            #xtract proj from the path. json and text logs have different path
            if "" in [fields][proj] {
                mutate {
                    add_field => {
                        "proj" => "%{[fields][proj]}"
                    }
                }
            }
            else {
                grok {
                    match => ["[log][file][path]", "^(?:[A-Za-z]:\\|/)?(?:.*[\\/])?(?<proj>[^\\/]+)[\\/](?:json)[\\/][^\\/]+$"]
                    tag_on_failure => ["error_proj_not_parsed"]
                    break_on_match => false
                }
            }

            json {
                source => "message"
                target => "parsed_json"
                remove_field => ["message"]  # Remove the original message field if its no longer needed
            }

            mutate {
                # Copy the entire parsed_json object into the message field
                copy => { "[parsed_json][message]" => "message" }
                copy => { "[parsed_json][properties]" => "properties" }
                copy => { "[parsed_json][level]" => "log-level" }
                copy => { "[parsed_json][logger]" => "logger" }
            }



            # Overwrite @timestamp field from date field. Timezone info is considered. No need to make timezone tricks.
            date {
                match => ["[parsed_json][date]", "ISO8601"]
                target => "@timestamp"
            }

            # Only copy loanId if it exists
            if [parsed_json][properties] and [parsed_json][properties][loanId] {
                mutate {
                    add_field => { "loanId" => "%{[parsed_json][properties][loanId]}" }
                    #convert => { "loanId" => "integer" }
                }
                mutate {
                    convert => {
                        "loanId" => "integer"
                    }
                }
            }

            # Only copy customerId if it exists
            if [parsed_json][properties] and [parsed_json][properties][customerId] {
                mutate {
                    add_field => { "customerId" => "%{[parsed_json][properties][customerId]}" }
                }
            }

            mutate {
                remove_field => ["parsed_json"]
            }

        } else {
            #text from log4net
            grok {
                patterns_dir => ["./patterns"]
                match => ["message", "(?m)%{TIMESTAMP_ISO8601:timestamp}%{SPACE}%{LOGLEVEL:log-level} %{LOAN_ID:loanId}%{SPACE}%{LOGGER:logger}%{SPACE}%{GREEDYDATA:information}"]
                tag_on_failure => ["error_message_not_parsed"]
                break_on_match => false
            }

            #extract proj from the path
            if "" in [fields][proj] {
                mutate {
                    add_field => {
                        "proj" => "%{[fields][proj]}"
                    }
                }
            } else {
                grok {
                    match => ["[log][file][path]", "%{GREEDYDATA}\\%{GREEDYDATA:proj}\\%{GREEDYDATA}$"]
                    tag_on_failure => ["error_proj_not_parsed"]
                    break_on_match => false
                }
            }

            mutate {
                gsub => [
                "loanId", "#", "",
                "loanId", "\(null\)", ""
                ]
                strip => ["loanId"]
            }

            if ("" in [loanId]) {
                mutate {
                    copy => {
                        "loanId" => "[@metadata][loanIdStr]"
                    }
                }
            }
            else {
                mutate {
                    add_field => {
                        "[@metadata][loanIdStr]" => ""
                    }
                }
            }

            if [loanId] == "" {
                mutate {
                    remove_field => ["loanId"]
                }
            }
            else {
                mutate {
                    convert => {
                        "loanId" => "integer"
                    }
                }
            }

            mutate {
                copy => {
                    "timestamp" => "source_timestamp"
                }
            }

            #as filebeat puts event.timezone in incompatible format correct it
            #timezone should be in format http://joda-time.sourceforge.net/timezones.html
            #when new server is added tags in event should be checked
            #if timestamp is not parsed correctly _dateparsefailure tag is added
            #it leads to timestamp taken from time when event was added and not timestamp from log message
            if [event][timezone] == "AEDT" {
                mutate {
                    update => { "[event][timezone]" => "Australia/Sydney" }
                }
            } else if [event][timezone] == "AEST" {
                mutate {
                    update => { "[event][timezone]" => "Australia/Sydney" }
                }
            } else if [event][timezone] == "EEST" {
                mutate {
                    update => { "[event][timezone]" => "Etc/GMT-3" }
                }
            } else if [event][timezone] == "CDT" {
                mutate {
                    update => { "[event][timezone]" => "EST" }
                }
            } else if [event][timezone] == "EDT" {
                mutate {
                    update => { "[event][timezone]" => "America/Toronto" }
                }
            } else if [server] == "prod-us-2" {
                mutate {
                    update => { "[event][timezone]" => "America/New_York" }
                }
            } else if [server] == "prod-us-3" {
                mutate {
                    update => { "[event][timezone]" => "America/New_York" }
                }
            } else if [server] == "west-europ-prod" {
                mutate {
                    update => { "[event][timezone]" => "Europe/Amsterdam" }
                }
            } else if [server] == "prod-us-texas" {
                mutate {
                    update => { "[event][timezone]" => "America/New_York" }
                }
            } else if [server] == "prod-canada-azu" {
                mutate {
                    update => { "[event][timezone]" => "America/New_York" }
                }
            } else if [server] == "prod-canada2-az" {
                mutate {
                    update => { "[event][timezone]" => "America/New_York" }
                }
            }

            #if there is timestamp from filebeat use it for timestamp parsing
            if "" in [event][timezone] {
                date {
                    match => ["timestamp", "ISO8601"]
                    timezone => "%{[event][timezone]}"
                }
            } else {
                date {
                    match => ["timestamp", "ISO8601"]
                }
            }

            mutate {
                copy => {"information" => "message"}
                remove_field => ["information"]
            }

        } # end text log specific log
}